name: Build Mac AppleSilicon

on: 
    push:
      branches: 
       - main
      paths:
       - 'src/**'
       - '**/CMakeLists.txt'
       - 'version.inc'
       - 'localization/**'
       - 'resources/**'
       - ".github/workflows/build_mac_arm64.yml"

    pull_request:
      branches: 
       - main 
      paths:
       - 'src/**'
       - '**/CMakeLists.txt'
       - 'version.inc'
       - 'localization/**'
       - 'resources/**'
       - ".github/workflows/build_mac_arm64.yml"
    
jobs:
  build_osx_arm64:
    name: Build Mac AppleSilicon
    runs-on: macos-12

    steps:
      - uses: actions/checkout@v3

      # - name: Install tools
      #   run: |
      #     brew install cmake git gettext zstd
      # - run: mkdir -p ${{ github.workspace }}/deps/build_arm64
      # - run: mkdir -p ${{ github.workspace }}/deps/build_arm64/OrcaSlicer_dep_arm64

      # # - name: build deps
      # #   id: cache_deps
      # #   uses: actions/cache@v3
      # #   env:
      # #     cache-name: ${{ runner.os }}-cache-orcaslicer_deps_arm64
      # #   with:
      # #     path: ${{ github.workspace }}/deps/build/OrcaSlicer_dep
      # #     key: build-${{ env.cache-name }}

      # # - if: ${{ steps.cache_deps.outputs.cache-hit != 'true' }}
      # #   name: build deps
      # #   working-directory: ${{ github.workspace }}
      # #   continue-on-error: true
      # #   run: ./build_release_macos.sh -d -a arm64
      # - name: Download and extract deps
      #   working-directory: ${{ github.workspace }}
      #   run: |
      #     curl -LJO https://github.com/SoftFever/FileSharing/releases/download/2023.08.2/OrcaSlicer_dep_mac_arm64_06-08-2023.tar.gz
      #     tar -zxfOrcaSlicer_dep_mac_arm64_06-08-2023.tar.gz -C ${{ github.workspace }}/deps/build_arm64
      #     chown -R $(id -u):$(id -g) ${{ github.workspace }}/deps/build_arm64/OrcaSlicer_dep_arm64
      #     ls -l ${{ github.workspace }}/deps/build_arm64/OrcaSlicer_dep_arm64
      #     rm OrcaSlicer_dep_mac_arm64_06-08-2023.tar.gz


      # - name: Build slicer
      #   working-directory: ${{ github.workspace }}
      #   run: |
      #     ./build_release_macos.sh -s -n -a arm64

      - name: download slicer
        working-directory: ${{ github.workspace }}
        run: |
          curl -LJO https://github.com/SoftFever/OrcaSlicer/releases/download/v1.6.4-beta2/OrcaSlicer_V1.6.4-beta2_Mac_AppleSilicon_signed.zip
          unzip OrcaSlicer_V1.6.4-beta2_Mac_AppleSilicon_signed.zip

      - name: Sign app
        working-directory: ${{ github.workspace }}
        if: github.event_name != 'pull_request'
        env:
          BUILD_CERTIFICATE_BASE64: ${{ secrets.BUILD_CERTIFICATE_BASE64 }}
          P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
          CERTIFICATE_ID: ${{ secrets.MACOS_CERTIFICATE_ID }}
        run: |
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db
          echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode --output $CERTIFICATE_PATH
          echo "<?xml version=\"1.0\" encoding=\"UTF-8\"?>
          <!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">
          <plist version=\"1.0\">
          <dict>
              <key>com.apple.security.cs.disable-library-validation</key>
              <yes/>
          </dict>
          </plist>" > "OrcaSlicer.entitlements"
          security create-keychain -p $KEYCHAIN_PASSWORD $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p $KEYCHAIN_PASSWORD $KEYCHAIN_PATH
          security import $CERTIFICATE_PATH -P $P12_PASSWORD -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k $P12_PASSWORD $KEYCHAIN_PATH
          codesign --deep --force --verbose --options runtime --timestamp --entitlements \"OrcaSlicer.entitlements\" --sign "$CERTIFICATE_ID" ./OrcaSlicer.app
      
      - name: Pack app
        working-directory: ${{ github.workspace }}
        run: |
          mkdir DMG-CONTENT
          ditto -v ./OrcaSlicer.app ./DMG-CONTENT
          ln -s /Applications ./DMG-CONTENT/Applications
          hdiutil create -volname "OrcaSlicer" -srcfolder ./DMG-CONTENT -ov -format UDZO OrcaSlicer.dmg
          codesign --deep --force --verbose --options runtime --timestamp --entitlements \"OrcaSlicer.entitlements\" --sign "$CERTIFICATE_ID" OrcaSlicer.dmg
          ls -al

      # (wip: staple failed, error 65)
      - name: Notarize the app 
        working-directory: ${{ github.workspace }}
        run: |
          xcrun notarytool store-credentials "notarytool-profile" --apple-id "${{ secrets.APPLE_DEV_ACCOUNT }}" --team-id "${{ secrets.TEAM_ID }}" --password "${{ secrets.APP_PWD }}"
          xcrun notarytool submit "OrcaSlicer.dmg" --keychain-profile "notarytool-profile" --wait
          xcrun stapler staple OrcaSlicer.dmg

      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: OrcaSlicer_Mac_AppleSilicon
          path: ${{ github.workspace }}/OrcaSlicer.dmg